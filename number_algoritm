import numpy as np
List = np.array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0]])
print(List)
length = []
count_X = []
count_Y = []
def arifmetic_mid_X(array, line_number):
    count_local_X = []
    global count_X
    for e in array[line_number]:
        if e:
            count_local_X.append(1)

    if len(count_local_X) > len(count_X):
        count_X = count_local_X

def arifmetic_mid_Y(array, line_number):
    array_T = array.transpose()
    count_local_Y = []
    global count_Y
    for e in array_T[line_number]:
        if e:
            count_local_Y.append(1)

    if len(count_local_Y) > len(count_Y):
        count_Y = count_local_Y


for w in range(len(List)):
    arifmetic_mid_X(List, w)

for w in range(len(List.transpose())):
    arifmetic_mid_Y(List, w)

print('count_X', len(count_X), count_X)
print('count_Y', len(count_Y), count_Y)

